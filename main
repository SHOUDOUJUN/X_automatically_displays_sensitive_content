// ==UserScript==
// @name         X/Twitter 敏感内容自动展示（精准版）
// @namespace    http://tampermonkey.net/
// @version      1.4
// @description  精准自动展开X/Twitter上的敏感内容警告，不影响正常功能
// @author       SHOUDOUJUN
// @match        https://x.com/*
// @match        https://twitter.com/*
// @match        https://*.x.com/*
// @match        https://*.twitter.com/*
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function() {
    'use strict';
    
    const config = {
        checkInterval: 1000,
        maxRetries: 5,
        clickDelay: 200
    };
    
    class PreciseSensitiveContentExpander {
        constructor() {
            this.processedElements = new WeakSet();
            this.retryCount = 0;
            this.init();
        }
        
        init() {
            console.log('X敏感内容自动展示脚本（精准版）已启动');
            this.addPreciseStyles();
            this.startPreciseObserver();
            this.startPeriodicCheck();
            
            // 初始检查
            setTimeout(() => this.expandSensitiveContent(), 2000);
        }
        
        addPreciseStyles() {
            const style = document.createElement('style');
            style.textContent = `
                /* 移除敏感内容的模糊效果 */
                div[data-testid="tweet"] div[style*="blur"],
                div[data-testid="tweet"] img[style*="blur"],
                div[data-testid="tweet"] video[style*="blur"] {
                    filter: none !important;
                }
                
                /* 隐藏敏感内容警告遮罩 */
                div[role="button"]:has(> span:contains("敏感内容")),
                div[role="button"]:has(> span:contains("Sensitive")),
                div:has(> span:contains("显示")) {
                    opacity: 0.3;
                }
            `;
            document.head.appendChild(style);
        }
        
        startPreciseObserver() {
            const observer = new MutationObserver((mutations) => {
                let shouldCheck = false;
                
                mutations.forEach((mutation) => {
                    mutation.addedNodes.forEach((node) => {
                        if (node.nodeType === 1) {
                            if (this.containsSensitiveContent(node)) {
                                shouldCheck = true;
                            }
                        }
                    });
                });
                
                if (shouldCheck) {
                    setTimeout(() => this.expandSensitiveContent(), 500);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
        
        containsSensitiveContent(node) {
            const text = node.textContent || '';
            return text.includes('敏感内容') || 
                   text.includes('Sensitive content') ||
                   text.includes('显示') ||
                   text.includes('Show');
        }
        
        startPeriodicCheck() {
            const interval = setInterval(() => {
                if (this.retryCount < config.maxRetries) {
                    this.expandSensitiveContent();
                    this.retryCount++;
                } else {
                    clearInterval(interval);
                }
            }, config.checkInterval);
        }
        
        expandSensitiveContent() {
            console.log('正在查找敏感内容...');
            
            // 方法1: 查找包含敏感内容文本的按钮
            this.clickSensitiveButtons();
            
            // 方法2: 查找特定的警告模式
            this.clickWarningPatterns();
            
            // 方法3: 处理媒体内容
            this.handleMediaContent();
            
            // 方法4: 处理独立警告页面
            this.handleWarningPages();
        }
        
        clickSensitiveButtons() {
            // 精确查找敏感内容按钮
            const buttons = document.querySelectorAll('button, [role="button"]');
            
            buttons.forEach(button => {
                if (this.processedElements.has(button)) return;
                
                const buttonText = button.textContent || '';
                const ariaLabel = button.getAttribute('aria-label') || '';
                const parentText = button.parentElement?.textContent || '';
                
                // 精确匹配敏感内容按钮
                const isSensitiveButton = (
                    // 按钮文本匹配
                    (buttonText.includes('显示') && !buttonText.includes('显示更多') && !buttonText.includes('显示回复')) ||
                    (buttonText.includes('Show') && !buttonText.includes('Show more') && !buttonText.includes('Show replies')) ||
                    (buttonText.includes('查看') && buttonText.length < 10) ||
                    (buttonText.includes('View') && buttonText.length < 10) ||
                    
                    // Aria标签匹配
                    (ariaLabel.includes('显示推文')) ||
                    (ariaLabel.includes('Show tweet')) ||
                    
                    // 上下文匹配 - 父元素包含敏感内容提示
                    (parentText.includes('敏感内容') && buttonText.match(/^(显示|查看|Show|View)$/))
                );
                
                // 排除功能按钮
                const isFunctionalButton = (
                    buttonText.includes('喜欢') || buttonText.includes('Like') ||
                    buttonText.includes('转推') || buttonText.includes('Retweet') ||
                    buttonText.includes('回复') || buttonText.includes('Reply') ||
                    buttonText.includes('分享') || buttonText.includes('Share') ||
                    buttonText.includes('书签') || buttonText.includes('Bookmark') ||
                    button.closest('[data-testid="reply"]') ||
                    button.closest('[data-testid="like"]') ||
                    button.closest('[data-testid="retweet"]') ||
                    button.closest('[data-testid="share"]')
                );
                
                if (isSensitiveButton && !isFunctionalButton && this.isVisible(button)) {
                    console.log('找到敏感内容按钮:', buttonText);
                    this.safeClick(button);
                    this.processedElements.add(button);
                }
            });
        }
        
        clickWarningPatterns() {
            // 查找特定的警告模式
            const warningPatterns = [
                // 包含"敏感内容"文本的容器中的按钮
                'div:has(> span:contains("敏感内容")) button',
                'div:has(> span:contains("Sensitive")) button',
                
                // 特定的警告样式
                '[data-testid="warning"] button',
                '[role="alert"] button'
            ];
            
            warningPatterns.forEach(pattern => {
                try {
                    const elements = document.querySelectorAll(pattern);
                    elements.forEach(element => {
                        if (!this.processedElements.has(element) && this.isVisible(element)) {
                            const text = element.textContent || '';
                            if (text.match(/^(显示|查看|Show|View)$/)) {
                                console.log('通过模式找到敏感内容按钮:', pattern);
                                this.safeClick(element);
                                this.processedElements.add(element);
                            }
                        }
                    });
                } catch (e) {
                    // 忽略选择器错误
                }
            });
        }
        
        handleMediaContent() {
            // 处理模糊的媒体内容
            const mediaElements = document.querySelectorAll(`
                [data-testid="tweetPhoto"],
                [data-testid="tweetVideo"],
                img,
                video
            `);
            
            mediaElements.forEach(media => {
                const style = window.getComputedStyle(media);
                if (style.filter.includes('blur') || style.webkitFilter.includes('blur')) {
                    // 检查是否在敏感内容上下文中
                    const container = media.closest('div[data-testid="tweet"]');
                    if (container) {
                        const containerText = container.textContent || '';
                        if (containerText.includes('敏感内容') || containerText.includes('Sensitive')) {
                            media.style.filter = 'none !important';
                            media.style.webkitFilter = 'none !important';
                        }
                    }
                }
            });
        }
        
        handleWarningPages() {
            // 处理独立警告页面
            const warningPages = document.querySelectorAll(`
                [data-testid="empty_state"],
                main h2:has-text("敏感内容"),
                main span:has-text("敏感内容")
            `);
            
            warningPages.forEach(page => {
                const pageText = page.textContent || '';
                if (pageText.includes('敏感内容') || pageText.includes('Sensitive')) {
                    const buttons = page.querySelectorAll('button, [role="button"]');
                    buttons.forEach(button => {
                        const buttonText = button.textContent || '';
                        if (buttonText.match(/^(显示|查看|Show|View)$/) && 
                            !this.processedElements.has(button) && 
                            this.isVisible(button)) {
                            console.log('处理警告页面按钮');
                            this.safeClick(button);
                            this.processedElements.add(button);
                        }
                    });
                }
            });
        }
        
        safeClick(element) {
            setTimeout(() => {
                try {
                    element.scrollIntoViewIfNeeded?.();
                    element.click();
                    console.log('成功点击敏感内容按钮');
                    
                    // 点击后再次检查，确保内容展开
                    setTimeout(() => this.expandSensitiveContent(), 1000);
                } catch (error) {
                    console.warn('点击失败:', error);
                }
            }, config.clickDelay);
        }
        
        isVisible(element) {
            if (!element) return false;
            const rect = element.getBoundingClientRect();
            const style = window.getComputedStyle(element);
            
            return style.display !== 'none' && 
                   style.visibility !== 'hidden' && 
                   rect.width > 0 && 
                   rect.height > 0 &&
                   rect.top >= 0 &&
                   rect.left >= 0 &&
                   rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                   rect.right <= (window.innerWidth || document.documentElement.clientWidth);
        }
    }
    
    // 页面加载后初始化
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => new PreciseSensitiveContentExpander(), 1000);
        });
    } else {
        setTimeout(() => new PreciseSensitiveContentExpander(), 1000);
    }
    
    // 处理单页应用导航
    let currentPath = window.location.pathname;
    const navObserver = new MutationObserver(() => {
        if (window.location.pathname !== currentPath) {
            currentPath = window.location.pathname;
            setTimeout(() => new PreciseSensitiveContentExpander(), 1500);
        }
    });
    
    navObserver.observe(document.body, {
        childList: true,
        subtree: true
    });
})();
